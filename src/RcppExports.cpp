// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rac
RcppExport SEXP rac(SEXP X, SEXP Y);
RcppExport SEXP _rabbitandchicken_rac(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(rac(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _rabbitandchicken_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP rac(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_rabbitandchicken_rac", (DL_FUNC) &_rabbitandchicken_rac, 2},
    {"_rabbitandchicken_rcpp_hello_world", (DL_FUNC) &_rabbitandchicken_rcpp_hello_world, 0},
    {"rac",                                (DL_FUNC) &rac,                                2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rabbitandchicken(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
